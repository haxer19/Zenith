local voidKill = {}

local isEnabled = false
local coroutineLoop

voidKill.enable = function()
    if not isEnabled then
        workspace.FallenPartsDestroyHeight = math.huge
        
        if getgenv().activeLoop then
            coroutine.close(getgenv().activeLoop)
            getgenv().activeLoop = nil
        end
        
        local animationList = {
            ["rbxassetid://12273188754"] = 1.311,
            ["rbxassetid://12296113986"] = 1.2
        }
        
        local function findAnimation(table, animationId)
            for id, duration in pairs(table) do
                if id == animationId then
                    return id
                end
            end
            return false
        end
        
        local player = game.Players.LocalPlayer
        
        getgenv().activeLoop = coroutine.create(function()
            while task.wait() do
                if not isEnabled then 
                    coroutine.yield() 
                end
                
                local character = player.Character
                if not character then
                    player.CharacterAdded:Wait()
                    character = player.Character
                end
                
                local animator = character.Humanoid.Animator
                
                for _, track in pairs(animator:GetPlayingAnimationTracks()) do
                    if findAnimation(animationList, track.Animation.AnimationId) then
                        task.wait(animationList[track.Animation.AnimationId])
                        local isTechActive = true
                        local lastPosition = character.HumanoidRootPart.CFrame
                        
                        track.Stopped:Connect(function()
                            isTechActive = false
                        end)
                        
                        repeat 
                            task.wait()
                            workspace.Camera.CameraType = Enum.CameraType.Scriptable
                            character.HumanoidRootPart.CFrame = CFrame.new(-1200, -460, 67)
                            character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
                            character.HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero
                        until not isTechActive
                        
                        task.wait(0.1)
                        character.HumanoidRootPart.CFrame = lastPosition
                        workspace.Camera.CameraType = Enum.CameraType.Custom
                        workspace.Camera.CameraSubject = character.Humanoid
                        task.wait(1)
                    end
                end
            end
        end)
        coroutine.resume(getgenv().activeLoop)
        isEnabled = true
    end
end

voidKill.disable = function()
    if isEnabled then
        isEnabled = false
        if getgenv().activeLoop then
            coroutine.close(getgenv().activeLoop)
            getgenv().activeLoop = nil
        end
    end
end

return voidKill