local VoidKill = {
    enabled = false,
    loop = nil
}

local animations = {
    ["rbxassetid://12273188754"] = 1.311,
    ["rbxassetid://12296113986"] = 1.2
}

local function ifind(t, a)
    for i in pairs(t) do
        if i == a then return i end
    end
    return false
end

local plr = game.Players.LocalPlayer

function VoidKill:Toggle()
    self.enabled = not self.enabled
    
    if self.enabled then
        workspace.FallenPartsDestroyHeight = 0/0
        
        if self.loop then
            coroutine.close(self.loop)
        end
        
        self.loop = coroutine.create(function()
            while task.wait() do
                if not self.enabled then break end
                
                local char = plr.Character
                if not char then
                    plr.CharacterAdded:Wait()
                    char = plr.Character
                end
                
                local animate = char.Humanoid.Animator
                for _, v in pairs(animate:GetPlayingAnimationTracks()) do
                    if ifind(animations, v.Animation.AnimationId) then
                        task.wait(animations[v.Animation.AnimationId])
                        local dothetech = true
                        local lastcf = char.HumanoidRootPart.CFrame
                        
                        v.Stopped:Connect(function()
                            dothetech = false
                        end)
                        
                        repeat task.wait()
                            workspace.Camera.CameraType = Enum.CameraType.Scriptable
                            char.HumanoidRootPart.CFrame = CFrame.new(-1200, -460, 67)
                            char.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
                            char.HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero
                        until not dothetech
                        
                        task.wait(0.1)
                        char.HumanoidRootPart.CFrame = lastcf
                        workspace.Camera.CameraType = Enum.CameraType.Custom
                        workspace.Camera.CameraSubject = char.Humanoid
                        task.wait(1)
                    end
                end
            end
        end)
        coroutine.resume(self.loop)
    else
        if self.loop then
            coroutine.close(self.loop)
            self.loop = nil
        end
    end
    
    return self.enabled
end

return VoidKill