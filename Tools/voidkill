getgenv().VoidKill = getgenv().VoidKill or {}
local vk = getgenv().VoidKill

if vk.loop then
    coroutine.close(vk.loop)
    vk.loop = nil
end

vk.enabled = false

local function start()
    if vk.enabled then return end
    vk.enabled = true
    workspace.FallenPartsDestroyHeight = 0/0
    local plr = game.Players.LocalPlayer
    local animations = {
        ["rbxassetid://12273188754"] = 1.311,
        ["rbxassetid://12296113986"] = 1.2,
    }
    local function ifind(t, a)
        return t[a] ~= nil
    end
    vk.loop = coroutine.create(function()
        local dothetech, lastcf
        while vk.enabled and task.wait() do
            local character = plr.Character
            local animate = character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("Animator")
            if animate then
                for _, v in pairs(animate:GetPlayingAnimationTracks()) do
                    if ifind(animations, v.Animation.AnimationId) then
                        task.wait(animations[v.Animation.AnimationId])
                        dothetech = true
                        lastcf = character.HumanoidRootPart.CFrame
                        v.Stopped:Connect(function()
                            dothetech = false
                        end)
                        repeat
                            task.wait()
                            workspace.Camera.CameraType = Enum.CameraType.Scriptable
                            character.HumanoidRootPart.CFrame = CFrame.new(-1200, -460, 67)
                            character.HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
                            character.HumanoidRootPart.AssemblyAngularVelocity = Vector3.zero
                        until not dothetech
                        task.wait(0.1)
                        character.HumanoidRootPart.CFrame = lastcf
                        workspace.Camera.CameraType = Enum.CameraType.Custom
                        workspace.Camera.CameraSubject = character.Humanoid
                        task.wait(1)
                    end
                end
            end
        end
    end)
    coroutine.resume(vk.loop)
end

local function stop()
    vk.enabled = false
end

vk.toggle = function()
    if vk.enabled then stop() else start() end
end

return vk
